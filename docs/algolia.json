[{"author":null,"categories":[],"content":null,"date":1654843867,"description":"","dir":"post\\storage\\redis\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2000,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1654843867,"objectID":"f63ec89fba15e0493c4040ebba847c5c","permalink":"https://pismery.github.io/post/storage/redis/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/","publishdate":"2022-06-10T14:51:07+08:00","readingtime":4,"relpermalink":"/post/storage/redis/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/","section":"post","summary":"\u003cp\u003e本文主要梳理 Redis 主从同步的流程与细节；\u003c/p\u003e","tags":["Redis"],"title":"Redis 主从同步","type":"post","url":"/post/storage/redis/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/","weight":0,"wordcount":1934},{"author":null,"categories":[],"content":null,"date":1640159363,"description":"","dir":"post\\common\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1640159363,"objectID":"a29994e11dadfda7475a69dffca9e869","permalink":"https://pismery.github.io/post/common/name/","publishdate":"2021-12-22T15:49:23+08:00","readingtime":1,"relpermalink":"/post/common/name/","section":"post","summary":"\u003cp\u003e日常开发时，方法命名总是让人头大，本文主要记录一些好的函数命名范式；\u003c/p\u003e","tags":[],"title":"Java 函数命名范式","type":"post","url":"/post/common/name/","weight":0,"wordcount":357},{"author":null,"categories":[],"content":null,"date":1614497483,"description":"","dir":"post\\common\\algorithm\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1900,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1614497483,"objectID":"4f75f8b57e8a9a9539a43800d8621728","permalink":"https://pismery.github.io/post/common/algorithm/lengthoflongestsubstring/","publishdate":"2021-02-28T15:31:23+08:00","readingtime":4,"relpermalink":"/post/common/algorithm/lengthoflongestsubstring/","section":"post","summary":"算法 - 无重复字符的最长子串 题目要求： 给定一个字符串 s，请你找出其中不含有重复字符的最长子串的长度。 示例 1: 入: s = \u0026quot;abcabcbb\u0026quot; 出: 3 释: 因为无重复字符的","tags":["算法"],"title":"「LeetCode - 3」无重复字符的最长子串","type":"post","url":"/post/common/algorithm/lengthoflongestsubstring/","weight":0,"wordcount":1863},{"author":null,"categories":[],"content":null,"date":1602401232,"description":"","dir":"post\\storage\\mysql\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1900,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1602401232,"objectID":"22561312f61b4f28d1e1656df4a85c7f","permalink":"https://pismery.github.io/post/storage/mysql/copy_table/","publishdate":"2020-10-11T15:27:12+08:00","readingtime":4,"relpermalink":"/post/storage/mysql/copy_table/","section":"post","summary":"\u003cp\u003e本文主要讲解 MySQL 中迁移表数据的一些方法；分别是\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003emysqldump 方法\u003c/li\u003e\n\u003cli\u003e导出 CSV 文件\u003c/li\u003e\n\u003cli\u003e物理拷贝方法\u003c/li\u003e\n\u003c/ul\u003e","tags":["MySQL","极客时间笔记"],"title":"「MySQL 45 讲」- 表复制","type":"post","url":"/post/storage/mysql/copy_table/","weight":0,"wordcount":1875},{"author":null,"categories":[],"content":null,"date":1602159367,"description":"","dir":"post\\storage\\mysql\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2500,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1602159367,"objectID":"6855df3e3b06e7a9070790d2313f781b","permalink":"https://pismery.github.io/post/storage/mysql/auto_increment/","publishdate":"2020-10-08T20:16:07+08:00","readingtime":5,"relpermalink":"/post/storage/mysql/auto_increment/","section":"post","summary":"\u003cp\u003e本文主要讲解 MySQL 中自增值相关内容\u003c/p\u003e","tags":["MySQL","极客时间笔记"],"title":"「MySQL 45 讲」- 自增值处理","type":"post","url":"/post/storage/mysql/auto_increment/","weight":0,"wordcount":2471},{"author":null,"categories":[],"content":null,"date":1601471143,"description":"","dir":"post\\storage\\mysql\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1500,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1601471143,"objectID":"5719c88a45b8d210b876003cc04cdef7","permalink":"https://pismery.github.io/post/storage/mysql/group_by_operation/","publishdate":"2020-09-30T21:05:43+08:00","readingtime":3,"relpermalink":"/post/storage/mysql/group_by_operation/","section":"post","summary":"\u003cp\u003e本文主要讲解 MySQL 对 group by 的处理流程；\u003c/p\u003e","tags":["MySQL","极客时间笔记"],"title":"「MySQL 45 讲」- Group By 操作处理","type":"post","url":"/post/storage/mysql/group_by_operation/","weight":0,"wordcount":1493},{"author":null,"categories":[],"content":null,"date":1600780043,"description":"","dir":"post\\storage\\mysql\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1600780043,"objectID":"d2ca76a53cdc915beffb0643fcc5ffc4","permalink":"https://pismery.github.io/post/storage/mysql/remove_algorithm/","publishdate":"2020-09-22T21:07:23+08:00","readingtime":2,"relpermalink":"/post/storage/mysql/remove_algorithm/","section":"post","summary":"\u003cp\u003e本文为 「极客时间- MySQL 实战 45 讲」 的学习笔记；主要为了加深理解；\u003c/p\u003e","tags":["MySQL","极客时间笔记"],"title":"「MySQL 45 讲」- Buffer Pool 淘汰算法","type":"post","url":"/post/storage/mysql/remove_algorithm/","weight":0,"wordcount":956},{"author":null,"categories":[],"content":null,"date":1600092333,"description":"","dir":"post\\storage\\mysql\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1600092333,"objectID":"351a938ec873ac1cbac56eb8d07e3a46","permalink":"https://pismery.github.io/post/storage/mysql/kill_thread/","publishdate":"2020-09-14T22:05:33+08:00","readingtime":3,"relpermalink":"/post/storage/mysql/kill_thread/","section":"post","summary":"\u003cp\u003e本文为 「极客时间- MySQL 实战 45 讲」 学习笔记；记录内容主要为了加深理解；\u003c/p\u003e\n\n\u003cp\u003e本篇主要讲解 kill 命令的执行流程与原理；\u003c/p\u003e","tags":["MySQL","极客时间笔记"],"title":"「MySQL 45 讲」- Kill 命令","type":"post","url":"/post/storage/mysql/kill_thread/","weight":0,"wordcount":1240},{"author":null,"categories":[],"content":null,"date":1599486983,"description":"","dir":"post\\storage\\mysql\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3100,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1599486983,"objectID":"a7bbde9deecee330129e6dbd3ba36585","permalink":"https://pismery.github.io/post/storage/mysql/overdue_read/","publishdate":"2020-09-07T21:56:23+08:00","readingtime":7,"relpermalink":"/post/storage/mysql/overdue_read/","section":"post","summary":"\u003cp\u003e本文为 「极客时间- MySQL 实战 45 讲」 学习笔记；主要目的是加深理解；\u003c/p\u003e","tags":["MySQL","极客时间笔记"],"title":"「MySQL 45 讲」- 过期读","type":"post","url":"/post/storage/mysql/overdue_read/","weight":0,"wordcount":3028},{"author":null,"categories":["Java"],"content":null,"date":1594536760,"description":"","dir":"post\\java\\spring\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2000,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1594536760,"objectID":"868f5dfe10a2bcc58e1a78e35ee89c36","permalink":"https://pismery.github.io/post/java/spring/spring%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E5%A4%B1%E6%95%88/","publishdate":"2020-07-12T14:52:40+08:00","readingtime":4,"relpermalink":"/post/java/spring/spring%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E5%A4%B1%E6%95%88/","section":"post","summary":"\u003cp\u003e本文重点介绍 Spring 事务处理的几个失效的场景和相关解决方案；\u003c/p\u003e","tags":["Java","Spring","Transaction"],"title":"Spring 事务处理失效","type":"post","url":"/post/java/spring/spring%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E5%A4%B1%E6%95%88/","weight":0,"wordcount":1919},{"author":null,"categories":[],"content":null,"date":1593956504,"description":"","dir":"post\\storage\\mysql\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1700,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1593956504,"objectID":"6138d5e5be57eb1ae6c1ba7e2d2eb8ad","permalink":"https://pismery.github.io/post/storage/mysql/mysql_execution_process/","publishdate":"2020-07-05T21:41:44+08:00","readingtime":4,"relpermalink":"/post/storage/mysql/mysql_execution_process/","section":"post","summary":"\u003cp\u003e本系列是「极客时间」课程「MySQL 实战 45 讲」的学习笔记，目的是为了强化学习效果；\u003c/p\u003e","tags":["MySQL","极客时间笔记"],"title":"「MySQL 45 讲」- MySQL 查询语句执行流程","type":"post","url":"/post/storage/mysql/mysql_execution_process/","weight":0,"wordcount":1622},{"author":null,"categories":["Java"],"content":null,"date":1593608942,"description":"","dir":"post\\common\\design-pattern\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2500,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1593608942,"objectID":"42fae1f5a1ab42a2dd6d6bd072b4326f","permalink":"https://pismery.github.io/post/common/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%BC%94%E8%BF%9B/","publishdate":"2020-07-01T21:09:02+08:00","readingtime":5,"relpermalink":"/post/common/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%BC%94%E8%BF%9B/","section":"post","summary":"\u003cp\u003e本文将通过梳理编码的思考过程，来讲述各种单例模式实现的缘由和注意事项；\u003c/p\u003e","tags":["设计模式"],"title":"单例模式演进","type":"post","url":"/post/common/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%BC%94%E8%BF%9B/","weight":0,"wordcount":2490},{"author":null,"categories":["Java"],"content":null,"date":1578148131,"description":"","dir":"post\\java\\spring\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1600,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1578148131,"objectID":"fa40d4dee2ab888c43a7b18a8fedb044","permalink":"https://pismery.github.io/post/java/spring/%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/","publishdate":"2020-01-04T22:28:51+08:00","readingtime":4,"relpermalink":"/post/java/spring/%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/","section":"post","summary":"过滤器与拦截器 本篇文章，主要讲解过滤器与拦截器的区别，使用方式以及使用场景； 过滤器与拦截器的区别： 使用范围不同：过滤器 (filter) 是 Java Sevlet 规范中的一部分","tags":["Java","Spring"],"title":"拦截器与过滤器","type":"post","url":"/post/java/spring/%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/","weight":0,"wordcount":1569},{"author":null,"categories":["Java"],"content":null,"date":1577625374,"description":"","dir":"post\\common\\design-pattern\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1577625374,"objectID":"e2bb3f321a2001dbc707c89a0923c3a5","permalink":"https://pismery.github.io/post/common/design-pattern/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/","publishdate":"2019-12-29T21:16:14+08:00","readingtime":3,"relpermalink":"/post/common/design-pattern/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/","section":"post","summary":"什么是幂等性？ 接口的幂等性是指相同的参数，调用一次或多次产生一致的效果； 为什么要保证幂等性？ 在系统运行过程中，总会由于各种原因导致重复调用接","tags":["设计思想"],"title":"接口幂等性","type":"post","url":"/post/common/design-pattern/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/","weight":0,"wordcount":1350},{"author":null,"categories":["Java"],"content":null,"date":1576420016,"description":"","dir":"post\\java\\util\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1576420016,"objectID":"d7bf0ba73427292e0a73f1434a23ce6a","permalink":"https://pismery.github.io/post/java/util/orderbyutils/","publishdate":"2019-12-15T22:26:56+08:00","readingtime":3,"relpermalink":"/post/java/util/orderbyutils/","section":"post","summary":"Order by 操作 排序问题是日常开发中经常遇到的问题，以下是 Java 解决各类排序问题的一些例子，以供大家参考。 单字段排序 对于排序问题，Java 提供了两种解决","tags":["工具类","Java"],"title":"OrderByUtils","type":"post","url":"/post/java/util/orderbyutils/","weight":0,"wordcount":1005},{"author":null,"categories":["Java"],"content":null,"date":1574511884,"description":"","dir":"post\\java\\netty\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1574511884,"objectID":"e2406f79392936515a9fdf4cd6a6b201","permalink":"https://pismery.github.io/post/java/netty/niozerocopy/","publishdate":"2019-11-23T20:24:44+08:00","readingtime":3,"relpermalink":"/post/java/netty/niozerocopy/","section":"post","summary":"Nio Zero Copy 谈到 NIO，总会提起 Zero Copy「零拷贝」；本篇文章就大概讲述一下零拷贝的内容。 首先，零拷贝的技术必须依赖操作系统，如果操作系统不支持，","tags":["Java","NIO","Netty"],"title":"Nio 零拷贝","type":"post","url":"/post/java/netty/niozerocopy/","weight":0,"wordcount":1048},{"author":null,"categories":["Java"],"content":null,"date":1573306175,"description":"","dir":"post\\java\\netty\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1573306175,"objectID":"491b9278b4e1e296eee7046877d8061b","permalink":"https://pismery.github.io/post/java/netty/niochartroom/","publishdate":"2019-11-09T21:29:35+08:00","readingtime":2,"relpermalink":"/post/java/netty/niochartroom/","section":"post","summary":"Nio 聊天室 本篇文章运用 NIO 实现一个简易的聊天室功能，目的是为了整合一下最近学习 NIO 中的 Channel, Buffer, Selector 的功能； 实现逻辑大概如下： 服务端： 启动一个 Server","tags":["Java","NIO","Netty"],"title":"Nio 聊天室","type":"post","url":"/post/java/netty/niochartroom/","weight":0,"wordcount":818},{"author":null,"categories":["Java"],"content":null,"date":1570543709,"description":"","dir":"post\\java\\structure\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2400,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1570543709,"objectID":"d5ad94331611fb5763238804e46b3625","permalink":"https://pismery.github.io/post/java/structure/hashmap/","publishdate":"2019-10-08T22:08:29+08:00","readingtime":5,"relpermalink":"/post/java/structure/hashmap/","section":"post","summary":"HashMap 详解 本篇文章将围绕下面几个问题展开： HashMap 的内部数据结构; HashMap 中 put 方法的过程; HashMap 中 hash 方法实现方式; HashMap 中扩容的过程; HashMap 的内部数据结构是怎么样的？ 在","tags":["数据结构"],"title":"HashMap","type":"post","url":"/post/java/structure/hashmap/","weight":0,"wordcount":2359},{"author":null,"categories":[],"content":null,"date":1569932815,"description":"","dir":"post\\common\\algorithm\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1569932815,"objectID":"d4c18ee4849378781e9659d0bc88659a","permalink":"https://pismery.github.io/post/common/algorithm/getprime/","publishdate":"2019-10-01T20:26:55+08:00","readingtime":2,"relpermalink":"/post/common/algorithm/getprime/","section":"post","summary":"算法 - 素数 题目 求小于等于 maxNum 中的所有素数；「ps: 素数又称质数，质数是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。」 题解 思","tags":["算法"],"title":"GetPrime","type":"post","url":"/post/common/algorithm/getprime/","weight":0,"wordcount":916},{"author":null,"categories":["Java"],"content":null,"date":1569725279,"description":"","dir":"post\\java\\jvm\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1800,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1569725279,"objectID":"5a7381a5e598adc7af9625e78748996e","permalink":"https://pismery.github.io/post/java/jvm/g1%E6%94%B6%E9%9B%86%E5%99%A8/","publishdate":"2019-09-29T10:47:59+08:00","readingtime":4,"relpermalink":"/post/java/jvm/g1%E6%94%B6%E9%9B%86%E5%99%A8/","section":"post","summary":"垃圾收集器 G1 G1「Garbage First」收集器是继 CMS 收集器的下一代垃圾收集器，在 Java 7 中加入了 JVM 垃圾收集器大家族中；其目的是为了适应服务器","tags":["Java","JVM"],"title":"G1收集器","type":"post","url":"/post/java/jvm/g1%E6%94%B6%E9%9B%86%E5%99%A8/","weight":0,"wordcount":1705},{"author":null,"categories":["Python"],"content":null,"date":1568125917,"description":"","dir":"post\\python\\spider\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1900,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1568125917,"objectID":"ea869998b804df1d5732275d1a3c0b79","permalink":"https://pismery.github.io/post/python/spider/%E7%8E%8B%E8%80%85%E8%90%A5%E5%9C%B0%E7%88%AC%E8%99%AB%E5%A4%8D%E7%9B%98/","publishdate":"2019-09-10T22:31:57+08:00","readingtime":4,"relpermalink":"/post/python/spider/%E7%8E%8B%E8%80%85%E8%90%A5%E5%9C%B0%E7%88%AC%E8%99%AB%E5%A4%8D%E7%9B%98/","section":"post","summary":"王者营地数据爬取 这两周应大佬吩咐去王者营地 app 爬取相关数据，在这里复盘一下自己在爬取过程中的思考。 目标 爬取 app 中每局的数据至 excel ，包含战局比分，事","tags":["Python"],"title":"王者营地爬虫复盘","type":"post","url":"/post/python/spider/%E7%8E%8B%E8%80%85%E8%90%A5%E5%9C%B0%E7%88%AC%E8%99%AB%E5%A4%8D%E7%9B%98/","weight":0,"wordcount":1870},{"author":null,"categories":["Java"],"content":null,"date":1557671732,"description":"","dir":"post\\java\\util\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1557671732,"objectID":"08e467f0463c5b5b355f55650bb8f10a","permalink":"https://pismery.github.io/post/java/util/jxlsdemo/","publishdate":"2019-05-12T22:35:32+08:00","readingtime":3,"relpermalink":"/post/java/util/jxlsdemo/","section":"post","summary":"JXLS JXLS 是 Java 导出 Excel 的一个工具包，尽管 POI 工具包已经可以满足所有的需求，但是有时候操作还是比较复杂，且有一定的代码量，而 JXLS 在生成 Excel 方面显得更加方便好","tags":["工具类","Java"],"title":"JxlsDemo","type":"post","url":"/post/java/util/jxlsdemo/","weight":0,"wordcount":1383},{"author":null,"categories":["Java"],"content":null,"date":1556804434,"description":"","dir":"post\\java\\basic\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1556804434,"objectID":"67802252317cda649537e20b8f3425aa","permalink":"https://pismery.github.io/post/java/basic/siftingappender/","publishdate":"2019-05-02T21:40:34+08:00","readingtime":1,"relpermalink":"/post/java/basic/siftingappender/","section":"post","summary":"\u003cp\u003e通过 Logback 的 SiftingAppender 实现按线程分配 log 文件 文件。\u003c/p\u003e","tags":["Java","log"],"title":"SiftingAppender","type":"post","url":"/post/java/basic/siftingappender/","weight":0,"wordcount":121},{"author":null,"categories":["Java"],"content":null,"date":1556706330,"description":"","dir":"post\\java\\basic\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3200,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1556706330,"objectID":"9ba7bc460585eeecc63c51cce8898588","permalink":"https://pismery.github.io/post/java/basic/logback/","publishdate":"2019-05-01T18:25:30+08:00","readingtime":7,"relpermalink":"/post/java/basic/logback/","section":"post","summary":"Logback Spring Boot 默认采用的日志框架就是 Logback; Logback 是 Log4j 创建者 Ceki Gülcü 创建的；下面介绍一下 Logback 的一些特性； 与 Log4j 相比更高的性能和更小的初始加载内存空间； Logback 经过了","tags":["Java","log"],"title":"Logback","type":"post","url":"/post/java/basic/logback/","weight":0,"wordcount":3126},{"author":null,"categories":["Java"],"content":null,"date":1556421814,"description":"","dir":"post\\java\\spring\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1800,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1556421814,"objectID":"29cd1ed0c61ea8a8eba4a7371df78d95","permalink":"https://pismery.github.io/post/java/spring/%E6%89%8B%E5%86%99springmvc%E5%AE%9E%E8%B7%B5/","publishdate":"2019-04-28T11:23:34+08:00","readingtime":4,"relpermalink":"/post/java/spring/%E6%89%8B%E5%86%99springmvc%E5%AE%9E%E8%B7%B5/","section":"post","summary":"Spring MVC Spring MVC 中核心关键类是 DispatchServlet, 所有的请求都会通过这个类进行分派调用指定的业务逻辑代码；这个类中最重要的两个入口方法是 initStrategies() 和 doDispatch() DispatchServlet.initStrategies() 从上图继承关系，可以发","tags":["Java","Spring"],"title":"手写springmvc实践","type":"post","url":"/post/java/spring/%E6%89%8B%E5%86%99springmvc%E5%AE%9E%E8%B7%B5/","weight":0,"wordcount":1701},{"author":null,"categories":["Java"],"content":null,"date":1555938534,"description":"","dir":"post\\java\\util\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1555938534,"objectID":"6216b1f736c8d114e90881c265c8d703","permalink":"https://pismery.github.io/post/java/util/getparametername/","publishdate":"2019-04-22T21:08:54+08:00","readingtime":2,"relpermalink":"/post/java/util/getparametername/","section":"post","summary":"\u003cp\u003e近期，自己在实现 Spring MVC 功能时，发现通过 Java 反射不能够获取到方法的参数名称；因此，查阅了一下资料，特此记录\u003c/p\u003e","tags":["工具类","Java"],"title":"GetParameterName","type":"post","url":"/post/java/util/getparametername/","weight":0,"wordcount":841},{"author":null,"categories":[],"content":null,"date":1555851814,"description":"","dir":"post\\storage\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1555851814,"objectID":"2d7ec7ebe1c59ef4dfb9ea3b35704df3","permalink":"https://pismery.github.io/post/storage/sqlserver/","publishdate":"2019-04-21T21:03:34+08:00","readingtime":3,"relpermalink":"/post/storage/sqlserver/","section":"post","summary":"\u003cp\u003esqlServer 的基本操作，用于日常工作查询；\u003c/p\u003e","tags":["database"],"title":"Sqlserver","type":"post","url":"/post/storage/sqlserver/","weight":0,"wordcount":1015},{"author":null,"categories":["Java"],"content":null,"date":1553177469,"description":"","dir":"post\\java\\util\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1553177469,"objectID":"b7468188b508e04f139b6869575d8783","permalink":"https://pismery.github.io/post/java/util/distinct_demo/","publishdate":"2019-03-21T22:11:09+08:00","readingtime":1,"relpermalink":"/post/java/util/distinct_demo/","section":"post","summary":"\u003cp\u003eJava 8 去重写法\u003c/p\u003e","tags":["工具类","Java"],"title":"Distinct_Demo","type":"post","url":"/post/java/util/distinct_demo/","weight":0,"wordcount":270},{"author":null,"categories":["Java"],"content":null,"date":1551530832,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1551530832,"objectID":"2330b08a76f31ed0bb3d292742ef9973","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-exchanger/","publishdate":"2019-03-02T20:47:12+08:00","readingtime":3,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-exchanger/","section":"post","summary":"\u003cdiv\u003e\u003c/div\u003e","tags":["concurrent","Java"],"title":"并发编程之并发工具类 Exchanger","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-exchanger/","weight":0,"wordcount":1046},{"author":null,"categories":["Java"],"content":null,"date":1550374532,"description":"","dir":"post\\java\\basic\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1550374532,"objectID":"c52e83d0093c33935cc03bf35d7a52e2","permalink":"https://pismery.github.io/post/java/basic/%E5%88%9D%E8%AF%86try-finally/","publishdate":"2019-02-17T11:35:32+08:00","readingtime":2,"relpermalink":"/post/java/basic/%E5%88%9D%E8%AF%86try-finally/","section":"post","summary":"\u003cp\u003e一文了解 Try Finally 执行顺序。\u003c/p\u003e","tags":["Java","basic"],"title":"初识Try Finally","type":"post","url":"/post/java/basic/%E5%88%9D%E8%AF%86try-finally/","weight":0,"wordcount":912},{"author":null,"categories":["Java"],"content":null,"date":1548505699,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2800,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1548505699,"objectID":"510dbf1eade243dc10156e5731eb23bc","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Batomic-atomic%E5%8E%9F%E5%AD%90%E7%B1%BB/","publishdate":"2019-01-26T20:28:19+08:00","readingtime":6,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Batomic-atomic%E5%8E%9F%E5%AD%90%E7%B1%BB/","section":"post","summary":"\u003cp\u003eJ.U.C Atomic 类通过 CAS 实现原子性操作。\u003c/p\u003e","tags":["concurrent","Java"],"title":"并发编程之 Atomic 原子类","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8Batomic-atomic%E5%8E%9F%E5%AD%90%E7%B1%BB/","weight":0,"wordcount":2784},{"author":null,"categories":["Java"],"content":null,"date":1547821359,"description":"","dir":"post\\java\\jvm\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":5900,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1547821359,"objectID":"0b67dd5719af7e0a7a598eaf3719d3e2","permalink":"https://pismery.github.io/post/java/jvm/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/","publishdate":"2019-01-18T22:22:39+08:00","readingtime":12,"relpermalink":"/post/java/jvm/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/","section":"post","summary":"垃圾回收机制 JVM 内存分配和回收策略 JDK1.8 前堆内存示意图 如上图，堆内存分为新生代、老年代，永久代；而新生代又分为Eden, Survivor 1, Survivor 2; 注意：永久代在JD","tags":["Java","JVM"],"title":"JVM之垃圾回收机制","type":"post","url":"/post/java/jvm/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/","weight":0,"wordcount":5884},{"author":null,"categories":["Java"],"content":null,"date":1547038387,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1547038387,"objectID":"7d7c1ea8ecaea71015ab08136cff8bfa","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-volatile/","publishdate":"2019-01-09T20:53:07+08:00","readingtime":2,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-volatile/","section":"post","summary":"voliatile 关键字 我们知道synchronized经过Java6的偏向锁、轻量级锁、锁消除、锁粗化等等优化性能得到了很大的提升，与Lock相差不大。但","tags":["concurrent","Java"],"title":"并发编程基础 Volatile","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-volatile/","weight":0,"wordcount":994},{"author":null,"categories":["Java"],"content":null,"date":1545397518,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1545397518,"objectID":"be2bce41216b6a1090232255cb6aa16a","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-semaphore/","publishdate":"2018-12-21T21:05:18+08:00","readingtime":2,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-semaphore/","section":"post","summary":"\u003cp\u003e同步工具类 Semaphore 实现信号量的功能，具有公平锁和非公平锁两种方式。\u003c/p\u003e","tags":["concurrent","Java"],"title":"并发编程之并发工具类-Semaphore","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-semaphore/","weight":0,"wordcount":899},{"author":null,"categories":["Java"],"content":null,"date":1545397500,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1500,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1545397500,"objectID":"4cd3cf11cc2ec0ca9b1aea45572711aa","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-cyclicbarrier/","publishdate":"2018-12-21T21:05:00+08:00","readingtime":3,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-cyclicbarrier/","section":"post","summary":"\u003cp\u003e同步工具类 CyclicBarrer 实现一组线程相互等待，直到所有线程到达屏障。\u003c/p\u003e","tags":["concurrent","Java"],"title":"并发编程之并发工具类-CyclicBarrier","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-cyclicbarrier/","weight":0,"wordcount":1438},{"author":null,"categories":["Java"],"content":null,"date":1545397494,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1545397494,"objectID":"48189676a040bf39cc0e881a4b87168f","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-countdownlatch/","publishdate":"2018-12-21T21:04:54+08:00","readingtime":2,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-countdownlatch/","section":"post","summary":"\u003cp\u003e同步工具类 CountDownLatch 实现一个或多个线程阻塞等待其他他线程完成操作。\u003c/p\u003e","tags":["concurrent","Java"],"title":"并发编程之并发工具类-CountDownLatch","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-countdownlatch/","weight":0,"wordcount":782},{"author":null,"categories":["Java"],"content":null,"date":1545314585,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1545314585,"objectID":"b281d429a04de9255ee7d795437035ec","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E6%A0%B8%E5%BF%83%E7%90%86%E8%AE%BA/","publishdate":"2018-12-20T22:03:05+08:00","readingtime":3,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E6%A0%B8%E5%BF%83%E7%90%86%E8%AE%BA/","section":"post","summary":"核心理论 共享性 共享性指资源对多个线程操作同一份资源，是导致线程不安全的主要前提之一。若所有线程都只操作线程内的数据，则就不会产生线程安全问题","tags":["concurrent","Java"],"title":"并发编程基础概念-核心理论","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E6%A0%B8%E5%BF%83%E7%90%86%E8%AE%BA/","weight":0,"wordcount":1310},{"author":null,"categories":["Java"],"content":null,"date":1545313597,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3300,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1545313597,"objectID":"89c6b38d0f783e4af29d9553818c91d7","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-synchronized/","publishdate":"2018-12-20T21:46:37+08:00","readingtime":7,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-synchronized/","section":"post","summary":"synchronized synchronized三种使用方式 修饰实例方法，表示对当前类的实例加锁，若要访问此方法需要获取当前实例的对象锁。 修饰静态方法，表示对当前","tags":["concurrent","Java"],"title":"并发编程基础-synchronized","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-synchronized/","weight":0,"wordcount":3248},{"author":null,"categories":["Java"],"content":null,"date":1544965742,"description":"","dir":"post\\common\\design-pattern\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1800,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1544965742,"objectID":"bd9ddf0f617ce1e1be9fe8b3cbaad425","permalink":"https://pismery.github.io/post/common/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","publishdate":"2018-12-16T21:09:02+08:00","readingtime":4,"relpermalink":"/post/common/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","section":"post","summary":"单例模式 意图 解决一个类不需要多次实例化，系统只需要一个实例化对象；或者资源占用太大只允许创建一个。 优缺点 单例模式: 优点：节约系统资源; 缺点：","tags":["设计模式"],"title":"单例模式","type":"post","url":"/post/common/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","weight":0,"wordcount":1751},{"author":null,"categories":["Java"],"content":null,"date":1544625873,"description":"","dir":"post\\java\\util\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1544625873,"objectID":"04821b895a830520a481fcea370a39d2","permalink":"https://pismery.github.io/post/java/util/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/","publishdate":"2018-12-12T22:44:33+08:00","readingtime":1,"relpermalink":"/post/java/util/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/","section":"post","summary":"\u003cp\u003e生成随机数工具类\u003c/p\u003e","tags":["算法","工具类","Java"],"title":"生成随机数","type":"post","url":"/post/java/util/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/","weight":0,"wordcount":462},{"author":null,"categories":["Java"],"content":null,"date":1544623127,"description":"","dir":"post\\java\\util\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1544623127,"objectID":"f943ae9a0d58ace00790d2676b7c88c8","permalink":"https://pismery.github.io/post/java/util/exchangeutils/","publishdate":"2018-12-12T21:58:47+08:00","readingtime":1,"relpermalink":"/post/java/util/exchangeutils/","section":"post","summary":"\u003cp\u003e三种方式实现交换数组中两个数。\u003c/p\u003e","tags":["工具类","Java"],"title":"ExchangeUtils","type":"post","url":"/post/java/util/exchangeutils/","weight":0,"wordcount":199},{"author":null,"categories":["Java"],"content":null,"date":1544316627,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":6200,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1544316627,"objectID":"642e88a43585d5488717257e64768eaa","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-executor%E6%A1%86%E6%9E%B6/","publishdate":"2018-12-09T08:50:27+08:00","readingtime":13,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-executor%E6%A1%86%E6%9E%B6/","section":"post","summary":"\u003cp\u003eExecutor 框架线程池框架。\u003c/p\u003e","tags":["concurrent","Java"],"title":"并发编程之线程池-Executor框架","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-executor%E6%A1%86%E6%9E%B6/","weight":0,"wordcount":6115},{"author":null,"categories":["Java"],"content":null,"date":1544015798,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3600,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1544015798,"objectID":"24559f29c0c2eac32fa470e4b4af3334","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E5%B7%A5%E5%8E%82%E7%B1%BBexecutors/","publishdate":"2018-12-05T21:16:38+08:00","readingtime":8,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E5%B7%A5%E5%8E%82%E7%B1%BBexecutors/","section":"post","summary":"\u003cp\u003e线程池工厂类 Executors\u003c/p\u003e","tags":["concurrent","Java"],"title":"并发编程之线程池-工厂类Executors","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E5%B7%A5%E5%8E%82%E7%B1%BBexecutors/","weight":0,"wordcount":3594},{"author":null,"categories":["Java"],"content":null,"date":1543531094,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1500,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1543531094,"objectID":"0ffc22ecb2b5f20f6266073b413d7a8a","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E9%94%81/","publishdate":"2018-11-30T06:38:14+08:00","readingtime":3,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E9%94%81/","section":"post","summary":"偏向锁、轻量级锁 引入偏向锁和轻量级锁目的都是为了当没有多线程竞争或者竞争不激烈的情况下，减少传统的重量级锁使用操作系统的互斥量（即Monit","tags":["concurrent","Java"],"title":"并发编程基础概念-锁","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5-%E9%94%81/","weight":0,"wordcount":1461},{"author":null,"categories":["Java"],"content":null,"date":1543529415,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2700,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1543529415,"objectID":"827bc6fd93b1f5259a8d9bbc82548955","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%8D%8F%E4%BD%9C/","publishdate":"2018-11-30T06:10:15+08:00","readingtime":6,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%8D%8F%E4%BD%9C/","section":"post","summary":"线程间的协作 线程状态 新建状态(New)：新创建了一个线程对象。 就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start","tags":["concurrent","Java"],"title":"并发编程基础-线程间的协作","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%8D%8F%E4%BD%9C/","weight":0,"wordcount":2697},{"author":null,"categories":["Java"],"content":null,"date":1543499878,"description":"","dir":"post\\java\\concurrent\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1543499878,"objectID":"d97d09364acbf97302e09e169caa8d31","permalink":"https://pismery.github.io/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-threadrunnablecallable/","publishdate":"2018-11-29T21:57:58+08:00","readingtime":3,"relpermalink":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-threadrunnablecallable/","section":"post","summary":"Thread vs Runnable 示例代码 public class Demo extend Thread { public Demo() { super(\u0026quot;Demo-Thread\u0026quot;); } public void run() { //Code } public static void main(String[] args) { new Demo().start(); } } public class Demo implements Runnable { public void run() { //Code } public static void main(String[] args) { new Thread(new Demo()).start(); } } 比较 通过实现Runnabl","tags":["concurrent","Java"],"title":"并发编程基础-Thread、Runnable、Callable","type":"post","url":"/post/java/concurrent/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-threadrunnablecallable/","weight":0,"wordcount":1179},{"author":null,"categories":["Java"],"content":null,"date":1543411842,"description":"","dir":"post\\java\\test\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1543411842,"objectID":"2a22cd900b8ad64ef6ba76a94981aee2","permalink":"https://pismery.github.io/post/java/test/powermock%E4%BD%BF%E7%94%A8/","publishdate":"2018-11-28T21:30:42+08:00","readingtime":2,"relpermalink":"/post/java/test/powermock%E4%BD%BF%E7%94%A8/","section":"post","summary":"PowerMock PowerMockito的优势在于能够mock静态方法，final方法，私有方法，构造函数，相当于弥补了mockito的不足。 基本使用 po","tags":["测试","Java"],"title":"PowerMock使用","type":"post","url":"/post/java/test/powermock%E4%BD%BF%E7%94%A8/","weight":0,"wordcount":532},{"author":null,"categories":["Java"],"content":null,"date":1542233188,"description":"","dir":"post\\java\\util\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1542233188,"objectID":"b7d4e189d6f914a9f707bb2004e7ec96","permalink":"https://pismery.github.io/post/java/util/collectors%E4%BD%BF%E7%94%A8/","publishdate":"2018-11-15T06:06:28+08:00","readingtime":2,"relpermalink":"/post/java/util/collectors%E4%BD%BF%E7%94%A8/","section":"post","summary":"\u003cp\u003e介绍 Collectors 工具类\u003c/p\u003e","tags":["工具类","Java"],"title":"Collectors使用","type":"post","url":"/post/java/util/collectors%E4%BD%BF%E7%94%A8/","weight":0,"wordcount":977},{"author":null,"categories":["Java"],"content":null,"date":1542197135,"description":"","dir":"post\\java\\test\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1542197135,"objectID":"282427ebdd582ee91920af2c84b1c8ca","permalink":"https://pismery.github.io/post/java/test/mockito%E4%BD%BF%E7%94%A8/","publishdate":"2018-11-14T20:05:35+08:00","readingtime":3,"relpermalink":"/post/java/test/mockito%E4%BD%BF%E7%94%A8/","section":"post","summary":"Mockito 初始化注解 背景 使用@Mock,@spy,@InjectMock等注解需要先初始化才能使用。 在测试类上使用@RunWith(MockitoJ","tags":["测试","Java"],"title":"Mockito使用","type":"post","url":"/post/java/test/mockito%E4%BD%BF%E7%94%A8/","weight":0,"wordcount":1109},{"author":null,"categories":["Java"],"content":null,"date":1542196157,"description":"","dir":"post\\java\\util\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1800,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1542196157,"objectID":"c26d6c87756fccbb99d817fb7b84fcf8","permalink":"https://pismery.github.io/post/java/util/%E6%97%A5%E6%9C%9F%E7%B1%BB%E6%93%8D%E4%BD%9C/","publishdate":"2018-11-14T19:49:17+08:00","readingtime":4,"relpermalink":"/post/java/util/%E6%97%A5%E6%9C%9F%E7%B1%BB%E6%93%8D%E4%BD%9C/","section":"post","summary":"\u003cp\u003eJava 8 新增日期类基本使用介绍\u003c/p\u003e","tags":["工具类","Java"],"title":"日期类操作","type":"post","url":"/post/java/util/%E6%97%A5%E6%9C%9F%E7%B1%BB%E6%93%8D%E4%BD%9C/","weight":0,"wordcount":1716},{"author":null,"categories":[],"content":null,"date":1540907738,"description":"","dir":"post\\common\\algorithm\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1700,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1540907738,"objectID":"839fc109664cba033873fd25621548ae","permalink":"https://pismery.github.io/post/common/algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","publishdate":"2018-10-30T21:55:38+08:00","readingtime":4,"relpermalink":"/post/common/algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","section":"post","summary":"快速排序 介绍 \u0026ensp;\u0026ensp;快速排序思想解决O(n)时间内求第N大数字 。 递归快速排序 版本一 思想 每次递归将基准移动到适合的位置，使得左","tags":["算法"],"title":"快速排序","type":"post","url":"/post/common/algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","weight":0,"wordcount":1626},{"author":null,"categories":[],"content":null,"date":1540907670,"description":"","dir":"post\\common\\algorithm\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1540907670,"objectID":"fe216efd3d24aabd1c8d12c69c74bcfb","permalink":"https://pismery.github.io/post/common/algorithm/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","publishdate":"2018-10-30T21:54:30+08:00","readingtime":3,"relpermalink":"/post/common/algorithm/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","section":"post","summary":"冒泡排序 普通冒泡 思路 由index=[ 0 , length-1-rangNumber ) 开始比较a[i]与a[i+1]的大小，若a[i]\u0026gt;a[i+1]，则交换，因此一次循环则将最","tags":["算法"],"title":"冒泡排序","type":"post","url":"/post/common/algorithm/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","weight":0,"wordcount":1069},{"author":null,"categories":["Java"],"content":null,"date":1540907009,"description":"","dir":"post\\common\\design-pattern\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1800,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":1540907009,"objectID":"05c244fb1bf4ffbdc262f10d3099939c","permalink":"https://pismery.github.io/post/common/design-pattern/%E5%B7%A5%E5%8E%82%E4%B8%89%E5%85%84%E5%BC%9F/","publishdate":"2018-10-30T21:43:29+08:00","readingtime":4,"relpermalink":"/post/common/design-pattern/%E5%B7%A5%E5%8E%82%E4%B8%89%E5%85%84%E5%BC%9F/","section":"post","summary":"工厂三兄弟 作用 一个类对象相关职责可以分为对象本身具有的职责、创建耦合对象职责、使用耦合对象职责；在工厂模式中强调，两个类A和B的关系要么A创","tags":["设计模式"],"title":"工厂三兄弟","type":"post","url":"/post/common/design-pattern/%E5%B7%A5%E5%8E%82%E4%B8%89%E5%85%84%E5%BC%9F/","weight":0,"wordcount":1794},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":[],"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"https://pismery.github.io/top/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/top/about/","section":"top","summary":"个人信息  刘嘉禾 | 本科 | 广州大学 | 软件工程 \u0026amp; 应用心理学（二专）| 毕业时间：2018.06 微信号：pismery001 | Email：pismery@163.com | 个人博客：https://pismery.gitee.io/blog/ 求职岗位：Java 高级工程师 | 项目经验：4 年  技能清单  掌握 Java 核心知识，具备良好的面向对象的编程思想，在项目中熟练使用各种设计模式； 掌握 Java 集合操作，并阅读过 HashMap 源码； 熟悉 JVM，对 JVM 的内存结构，内存模型，垃圾回收算法有深入了解；\n 熟悉 Java 并发编程，对 Java 锁机制，线程池，AQS，并发工具类等都有深入理解，并在项目中熟练使用； 熟悉 Spring MVC，Spring Boot，Mybatis 等常用框架，可以根据需求快速搭建项目，并阅读过相关源码； 熟悉 SQL 与 MySQL 数据库优化，对事务，B+ 树，索引优化有深入理解，并实践过线上业务调优； 熟悉 Redis，对缓存击穿，缓存穿透，高可用机制，哨兵机制有深入了解； 熟悉 Kafka，在高吞吐下保证消息不丢，消息消费顺序性，有实际项目经验； 熟练搭建 Redis, ElasticSearch, Kafka, Flink, ZooKeeper 等高可用集群环境，有运维生产环境经验；  工作经历 坤湛科技有限公司（2021年5月 ~ 至今） 工作内容  参与智慧城市项目交付，主要负责健康，工地，文旅等后台管理模块的设计与代码实现； 参与共享服务管理平台项目交付，主要负责拓扑，链路，监控，统计等模块的设计与代码实现； 参与具体交付项目过程中，通过梳理和抽象，沉淀通用能力至公司技术平台中；  友邦资讯科技（广州）有限公司 （ 2018 年 1 月 ~ 2021年4月） 工作内容  负责旧系统迁移下线，相关的功能代码实现，迁移文档攥写，组织迁移演练； 负责核心团险系统二期功能的模块设计与代码实现； 负责再保险模块的需求分析，模块设计，代码实现与维护； 负责新系统框架可行性及性能验证；  项目经历 智慧城市（2021-12 ~ 至今） 技术选型：Spring Boot + Hibernate + MySQL + Nacos + Dubbo + XXL-Job + RocketMQ","tags":null,"title":"","type":"top","url":"/top/about/","weight":0,"wordcount":261},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/categories/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/","section":"categories","summary":"","tags":null,"title":"Categories","type":"categories","url":"/categories/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1569725279,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1569725279,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/jvm/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/jvm/","section":"tags","summary":"","tags":null,"title":"JVM","type":"tags","url":"/tags/jvm/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1594536760,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1594536760,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/java/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/java/","section":"tags","summary":"","tags":null,"title":"Java","type":"tags","url":"/tags/java/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1594536760,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1594536760,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/categories/java/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/java/","section":"categories","summary":"","tags":null,"title":"Java","type":"categories","url":"/categories/java/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1602401232,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1602401232,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/mysql/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/mysql/","section":"tags","summary":"","tags":null,"title":"MySQL","type":"tags","url":"/tags/mysql/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1574511884,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1574511884,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/nio/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/nio/","section":"tags","summary":"","tags":null,"title":"NIO","type":"tags","url":"/tags/nio/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1574511884,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1574511884,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/netty/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/netty/","section":"tags","summary":"","tags":null,"title":"Netty","type":"tags","url":"/tags/netty/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1654843867,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"home","lang":"en","lastmod":1654843867,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/","section":"","summary":"","tags":null,"title":"Pismery Blog","type":"page","url":"/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1654843867,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":1654843867,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/post/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/post/","section":"post","summary":"","tags":null,"title":"Posts","type":"post","url":"/post/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1568125917,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1568125917,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/python/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/python/","section":"tags","summary":"","tags":null,"title":"Python","type":"tags","url":"/tags/python/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1568125917,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1568125917,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/categories/python/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/categories/python/","section":"categories","summary":"","tags":null,"title":"Python","type":"categories","url":"/categories/python/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1654843867,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1654843867,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/redis/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/redis/","section":"tags","summary":"","tags":null,"title":"Redis","type":"tags","url":"/tags/redis/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1594536760,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1594536760,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/spring/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/spring/","section":"tags","summary":"","tags":null,"title":"Spring","type":"tags","url":"/tags/spring/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1569725279,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomyTerm","lang":"en","lastmod":1569725279,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/","section":"tags","summary":"","tags":null,"title":"Tags","type":"tags","url":"/tags/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/top/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/","section":"top","summary":"","tags":null,"title":"Tops","type":"top","url":"/top/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1594536760,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1594536760,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/transaction/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/transaction/","section":"tags","summary":"","tags":null,"title":"Transaction","type":"tags","url":"/tags/transaction/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1550374532,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1550374532,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/basic/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/basic/","section":"tags","summary":"","tags":null,"title":"basic","type":"tags","url":"/tags/basic/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1551530832,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1551530832,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/concurrent/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/concurrent/","section":"tags","summary":"","tags":null,"title":"concurrent","type":"tags","url":"/tags/concurrent/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1555851814,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1555851814,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/database/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/database/","section":"tags","summary":"","tags":null,"title":"database","type":"tags","url":"/tags/database/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1556804434,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1556804434,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/log/","section":"tags","summary":"","tags":null,"title":"log","type":"tags","url":"/tags/log/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1576420016,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1576420016,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/","section":"tags","summary":"","tags":null,"title":"工具类","type":"tags","url":"/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1570543709,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1570543709,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","section":"tags","summary":"","tags":null,"title":"数据结构","type":"tags","url":"/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1602401232,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1602401232,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E7%AC%94%E8%AE%B0/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E7%AC%94%E8%AE%B0/","section":"tags","summary":"","tags":null,"title":"极客时间笔记","type":"tags","url":"/tags/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E7%AC%94%E8%AE%B0/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1543411842,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1543411842,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/%E6%B5%8B%E8%AF%95/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/%E6%B5%8B%E8%AF%95/","section":"tags","summary":"","tags":null,"title":"测试","type":"tags","url":"/tags/%E6%B5%8B%E8%AF%95/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1614497483,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1614497483,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/%E7%AE%97%E6%B3%95/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/%E7%AE%97%E6%B3%95/","section":"tags","summary":"","tags":null,"title":"算法","type":"tags","url":"/tags/%E7%AE%97%E6%B3%95/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1577625374,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1577625374,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/","section":"tags","summary":"","tags":null,"title":"设计思想","type":"tags","url":"/tags/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":1593608942,"description":"","dir":"","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"taxonomy","lang":"en","lastmod":1593608942,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://pismery.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","section":"tags","summary":"","tags":null,"title":"设计模式","type":"tags","url":"/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","weight":0,"wordcount":0}]